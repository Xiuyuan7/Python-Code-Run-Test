from math import sqrt


class Solution:
    """
    @params: a:Tuple(int), b:Tuple(int), c:Tuple(int), p:Tuple(int), q:Tuple(int)
    @return: int
    @Time: O(1)
    @Space: O(1)
    """
    def belong_to(self, a, b, c, p, q):
        if not self.is_valid_triangle(a, b, c):
            return 0

        abc_area = self.get_triangle_area(a, b, c)
        # Use p point with every other two points of a b c to form a triangle, and get the sum of areas
        abcp_area = self.get_triangle_area(a, b, p) + self.get_triangle_area(a, c, p) + self.get_triangle_area(b, c, p)
        # Use q point with every other two points of a b c to form a triangle, and get the sum of areas
        abcq_area = self.get_triangle_area(a, b, q) + self.get_triangle_area(a, c, q) + self.get_triangle_area(b, c, q)

        # If the sum of areas equals abc_area, it means the point p or q is on or inside the triangle
        if abc_area == abcp_area and abc_area == abcq_area:
            return 3

        if abc_area == abcp_area:
            return 1

        if abc_area == abcq_area:
            return 2

        return 4


    """
    @params: a:Tuple(int), b:Tuple(int), c:Tuple(int)
    @return: bool
    @Time: O(1)
    @Space: O(1)
    """
    def is_valid_triangle(self, a, b, c):
        # Check the validity of triangle generated by the three points
        ab = sqrt(abs(a[0] - b[0]) ** 2 + abs(a[1] - b[1]) ** 2)
        bc = sqrt(abs(b[0] - c[0]) ** 2 + abs(b[1] - c[1]) ** 2)
        ac = sqrt(abs(a[0] - c[0]) ** 2 + abs(a[1] - c[1]) ** 2)
        if ab + bc > ac and bc + ac > ab and ab + ac > bc:
            return True
        return False


    """
    @params: a:Tuple(int), b:Tuple(int), c:Tuple(int)
    @return: int
    @Time: O(1)
    @Space: O(1)
    """
    def get_triangle_area(self, a, b, c):
        # Calculate the area of triangle generated by the three points
        x_a, y_a = a[0], a[1]
        x_b, y_b = b[0], b[1]
        x_c, y_c = c[0], c[1]
        return abs((x_a * (y_b - y_c) + x_b * (y_c - y_a) + x_c * (y_a - y_b)) / 2)


s = Solution()

a = (2, 2)
b = (7, 2)
c = (5, 4)
p = (4, 3)
q = (7, 4)
print(s.belong_to(a, b, c, p, q))  # 1

a = (2, 2)
b = (7, 2)
c = (5, 4)
p = (4, 2)
q = (7, 4)
print(s.belong_to(a, b, c, p, q))  # 1

a = (2, 2)
b = (7, 2)
c = (5, 4)
p = (4, 2)
q = (6, 3)
print(s.belong_to(a, b, c, p, q))  # 3
